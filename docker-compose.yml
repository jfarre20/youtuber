version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=http://localhost:3001/api
      - VITE_WS_BASE_URL=ws://localhost:3001
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API (optional - for full stack)
  backend:
    image: node:18-alpine
    working_dir: /app
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:password@localhost:5432/youtube_sequencer}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: sh -c "npm install && npm run build && npm start"
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=youtube_sequencer
      - POSTGRES_USER=youtube_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-change-this-password-in-production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U youtube_user -d youtube_sequencer"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional - for production)
  nginx-proxy:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - production

  # Development with hot reload
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:3001/api
      - VITE_WS_BASE_URL=ws://localhost:3001
      - VITE_HMR_HOST=0.0.0.0
      - VITE_HMR_PORT=3000
    networks:
      - app-network
    profiles:
      - development
    # Override the default command to set proper HMR host
    command: ["sh", "-c", "npm run dev -- --host 0.0.0.0 --port 3000"]

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
